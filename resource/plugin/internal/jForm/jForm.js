$.widget("ui.jForm", {    options: {        elements: [],        data: null,        getVisibles: false,        insert_before: false,        appendElement: null    },    _setElementDefaultOptions: function (options) {        options = $.extend(true, {            add: true,            include_in_result: true,            show: true,            focus: false,            name: "field",            type: "text",            label: "Input",            placeholder: "Escribe aquí",            class: "col-xs-12",            validate: function () {            },            setValue: function () {            },            clean: function () {            },            onTypeEnter: function () {            },            onKeyUp: function () {            },            text_button_type: {                buttons: []            },            selectType: {                jSelect: {}            },            labelType: {                value: undefined            },            buttonType: {                text: "",                type: 'default',                btnBlock: true,                click: function () {                }            },            switchType: {                bootstrapSwitch: {}            },            panelType: {                setContent: function () {                }            },            textareaType: {                height: 100            },            fileType: {                multiple: false,                excel: false,                return_in_base_64: true,                fileinput: {}            },            dateType: {                datetimepicker: {                    tooltips: {                        today: 'Hoy',                        clear: 'Limpiar',                        close: 'Cerrar',                        selectMonth: 'Seleccionar Mes',                        prevMonth: 'Anterior Mes',                        nextMonth: 'Siguiente Mes',                        selectYear: 'Seleccionar Año',                        prevYear: 'Anterior Año',                        nextYear: 'Siguiente Año',                        selectDecade: 'Seleccionar Decada',                        prevDecade: 'Anterior Decada',                        nextDecade: 'Siguiente Decada',                        prevCentury: 'Anterior Siglo',                        nextCentury: 'Siguiente Siglo'                    }                },                format: null,                icon: 'glyphicon glyphicon-calendar',                show_on_focus: true,                input_text: false            },            radioType: {                jRadioBoton: {}            },            checkboxType: {                jCheckbox: {}            },            colorType: {                colorpicker: {}            },            dualButtonType: {                main_button: {                    text: "Seleccionar",                    type: 'default',                    click: function () {                    }                },                buttons: [],            },            multiselect_type: {                click: function () {                }            },            tags_input_type: {            },            input_group_type: {                value: '',                position: 'left',            },        }, options);        return options;    },    getData: function (validate) {        validate = validate === undefined;        var that = this;        var result = {            isValid: true,            data: {}        };        $('.element', this.element).each(function (i, element) {            var $element = $(element);            var data = $element.data('data');            var input = $element.data('input');            if (!data.include_in_result)                return;            if (that.options.getVisibles && !$element.is(":visible"))                return;            var value;            switch (data.type) {                case "text":                case "password":                case "select":                case "textarea":                case "color":                    value = input.val();                    if (typeof value === "string")                        value = value.trim();                    result.data[data.name] = value;                    break;                case "button":                case "dualbutton":                case "text_button":                    value = input.data('val');                    result.data[data.name] = value;                    break;                case "switch":                    var indeterminate = input.bootstrapSwitch('indeterminate');                    value = indeterminate ? undefined : input.bootstrapSwitch('state');                    result.data[data.name] = value;                    break;                case "label":                    value = input.text();                    result.data[data.name] = value;                    break;                case "file":                    var files = input.data('files');                    result.data[data.name] = data.fileType.multiple ? files : files[0];                    break;                case "date":                    value = input.data("DateTimePicker").date();                    if (value !== null && data.dateType.format !== null)                        value = value.format(data.dateType.format);                    result.data[data.name] = value;                    break;                case "radio":                    value = input.jRadioBoton('obtenerSeleccionado', false);                    result.data[data.name] = value;                    break;                case "money":                case "percentage":                    var numeric = input.data('numeric');                    value = numeric.getNumber();                    result.data[data.name] = value;                    break;                case "multiselect":                    value = input.data('val');                    value = value ? value.length !== 0 ? value : undefined : undefined;                    result.data[data.name] = value;                    break;                case "checkbox":                    value = input.jCheckbox('get_checked_data');                    result.data[data.name] = value;                    break;                case "panel":                    value =  input.data(data.name);                    result.data[data.name] = value;                    break;                case "text_group_button":                    value = input.val();                    if (typeof value === "string")                        value = value.trim();                    result.data[data.name] = value;                    break;            }            if (!validate || data.type === 'label')                return;            input.trigger('validate', [value]);            if (input.data('invalid'))                result.isValid = false;        });        return result;    },    append_elements: function (elements) {        this._processElements(elements);    },    clean: function () {        $('.element', this.element).each(function (i, element) {            var $element = $(element);            var input = $element.data('input');            input.trigger('clean');        });    },    getElementByName: function (name) {        return $('[name="' + name + '"]', this.element);    },    _create: function () {        if(this.options.insert_before)            $(this.element).addClass('jForm').prepend('<div class="row jform-row"></div>');        else            $(this.element).addClass('jForm').append('<div class="row jform-row"></div>');        this._processElements(this.options.elements);    },    _processElements: function (elements) {        var that = this;        $.each(elements, function (i, options) {            options = that._setElementDefaultOptions(options);            if (!options.add)                return;            var element = {};            switch (options.type) {                case "text":                case "password":                    element = that._setInputTextPassword(options);                    break;                case "select":                    element = that._setInputSelect(options);                    break;                case "label":                    element = that._setLabel(options);                    break;                case "button":                    element = that._setButton(options);                    break;                case "switch":                    element = that._setSwitch(options);                    break;                case "panel":                    element = that._setPanel(options);                    break;                case "file":                    element = that._setInputFile(options);                    break;                case "textarea":                    element = that._setTextarea(options);                    break;                case "date":                    element = that._setInputDate(options);                    break;                case "radio":                    element = that._setRadioButton(options);                    break;                case "color":                    element = that._setInputColor(options);                    break;                case "money":                    element = that._setInputMoney(options);                    break;                case "percentage":                    element = that._setInputPercentage(options);                    break;                case "dualbutton":                    element = that._setDualButton(options);                    break;                case "text_button":                    element = that._set_input_text_button(options);                    break;                case "multiselect":                    element = that._set_multiselect(options);                    break;                case "tags_input":                    element = that._set_tags_input(options);                    break;                case "checkbox":                    element = that._setCheckboxes(options);                    break;                case "text_group_button":                    element = that._set_input_group_button(options);                    break;            }            element.container.hide();            element.container.data('data', options);            element.container.data('input', element.input);            if ($.isFunction(that.options.appendElement))                that.options.appendElement.call($(that.element), element.container);            else                $(that.element).find('.jform-row').append(element.container);            if (options.label === null)                $('.control-label', element.container).remove();            element.input.on('clean', function () {                options.clean.call(this);            });            element.input.on('keypress', function (e) {                if (e.which === 13 && options.type !== 'textarea')                    options.onTypeEnter.call(that.element);            }).on('keyup', function () {                options.onKeyUp.call(that.element, $(this).val());            });            options.validate.call(element.input, that.element);            options.setValue.call(element.input, that.options.data, element.container);            if ($.isFunction(options.validate_show))                options.show = options.validate_show.call(element.input, that.options.data);            if (options.show)                element.container.show('fast', function () {                    var options = $(this).data('data');                    var input = $(this).data('input');                    if (options.focus)                        input.focus();                });        })    },    _setInputTextPassword: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<input name="' + options.name + '" type="' + options.type + '" class="form-control" placeholder="' + options.placeholder + ' "/>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        return {            container: $container,            input: $('input', $container)        }    },    _setInputSelect: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<select class="form-control" name="' + options.name + '" ></select>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('select', $container).jSelect(options.selectType.jSelect);        return {            container: $container,            input: $input        }    },    _setLabel: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label" >' + options.label + '</label>' +            '<p name="' + options.name + '" class="well well-sm" style="text-align: center; margin-bottom: 0">' + options.labelType.value + '</p>' +            '</div>' +            '</div>'        );        var $input = $('p', $container);        if (options.labelType.value === undefined) {            $input.hide();            $('.form-group', $container).css('margin', '0');        }        return {            container: $container,            input: $input        }    },    _setButton: function (options) {        var that = this;        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="text-center">' +            '<button style="white-space: normal; padding: 6px 25px;" name="' + options.name + '" ' +            'class="btn ' + (options.buttonType.btnBlock ? 'btn-block' : '') + ' btn-' + options.buttonType.type + '">' +            '<span>' + options.buttonType.text + '</span>' +            '</button>' +            '</div>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('button', $container).click(function () {            options.buttonType.click.call(this, that.options.data );        });        return {            container: $container,            input: $input        }    },    _setSwitch: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="form-group" style="text-align: center;">' +            '<input type="checkbox" name="' + options.name + '">' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('input', $container).bootstrapSwitch(options.switchType.bootstrapSwitch);        return {            container: $container,            input: $input        }    },    _setPanel: function (options) {        var $container = $('<div class="element ' + options.class + '" name="' + options.name + '"></div>');        options.panelType.setContent.call($container, options);        $container.data(options.name, '');        return {            container: $container,            input: $container        }    },    _setInputFile: function (options) {        var multiple = options.fileType.multiple ? 'multiple' : '';        var excel = options.fileType.excel ? 'excel' : '';        // options.name = options.name + (options.fileType.multiple ? '[]' : '');        var $container = $(            '<div class="element ' + options.class + '">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="form-group" style="text-align: center;">' +            '<input name="' + options.name + '" type="file" ' + multiple + ' class="file" placeholder="' + options.placeholder + '" >' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var reset_files = true;        var total_files = 0;        var $input = $('input', $container).fileinput(options.fileType.fileinput)            .data('files', [])            .on('fileselect', function (event, numFiles) {                $(this).fileinput('lock');                if (reset_files) {                    total_files = numFiles;                    $(this).data('files', []);                }            })            .on('fileerror', function () {                var that = this;                setTimeout(function () {                    $(that).fileinput('unlock');                    $(that).data('files', []);                }, 1)            })            .on('filebatchselected', function (e, files) {                var that = this;                var files_base_64 = [];                var counter = 0;                if(options.fileType.process_files) {                    options.fileType.process_files(files);                    setTimeout(function () {                        $(that).fileinput('unlock');                    }, 1)                }else {                    if(options.fileType.return_in_base_64){                        $.each(files, function (i, file) {                            var reader = new FileReader();                            reader.onload = function (e) {                                counter++;                                files_base_64.push({                                    name: file.name,                                    base_64: e.target.result.split(';base64,')[1],                                    type: file.type                                });                                if (total_files === counter) {                                    $(that).fileinput('unlock');                                    $(that).data('files', files_base_64);                                    if ($.isFunction(options.fileType.on_file_loaded))                                        options.fileType.on_file_loaded.call(that, files_base_64);                                }                            };                            reader.readAsDataURL(file);                        });                    }else{                        reset_files = false;                        var result = [];                        $.each(files, function (i, file) {                            result.push(file);                        });                        $(that).data('files', result);                        setTimeout(function () {                            $(that).fileinput('unlock');                        }, 1)                    }                }            })            .on('fileuploaded', function (event, data, msg) {                if (data.response.status === "500")                    console.error(data.response.message);                else if (data.response.status == "200")                    options.fileType.on_success.call($(this), data.response.data)            });        return {            container: $container,            input: $input        }    },    _setTextarea: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<textarea name="' + options.name + '" class="form-control" style="resize: none; ' +            'height:' + options.textareaType.height + ' " placeholder="' + options.placeholder + '" ></textarea>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>');        var $input = $('textarea', $container);        return {            container: $container,            input: $input        }    },    _setInputDate: function (options) {        var type = options.dateType.input_text ? 'text' : 'button';        var $container = $(            '<div class="element ' + options.class + ' input-date">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="form-group">' +            '<div name="' + options.name + '" class="input-group date">' +            '<input type="' + type + '" class="form-control" />' +            '<span class="input-group-addon">' +            '<span class="' + options.dateType.icon + '"></span>' +            '</span>' +            '</div>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('.date', $container).datetimepicker(options.dateType.datetimepicker);        if(options.dateType.show_on_focus)            $input.find('input').on('focus', function () {                $(this).closest('.date').data("DateTimePicker").show();            });        return {            container: $container,            input: $input        }    },    _setRadioButton: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="form-group" style="text-align: center;">' +            '<div class="jRadioBoton" name="' + options.name + '"></div>' +            '</div>' +            '</div>'        );        var $input = $('.jRadioBoton', $container).jRadioBoton(options.radioType.jRadioBoton);        return {            container: $container,            input: $input        }    },    _setCheckboxes: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="form-group" style="text-align: center;">' +            '<div class="jcheckbox" name="' + options.name + '"></div>' +            '</div>' +            '</div>'        );        var $input = $('.jcheckbox', $container).jCheckbox(options.checkboxType.jCheckbox);        return {            container: $container,            input: $input        }    },    _setInputColor: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="input-group colorpicker-component">' +            '<input name="' + options.name + '" type="text" class="form-control" />' +            '<span class="input-group-addon"><i></i></span>' +            '</div>' +            '</div>' +            '</div>'        ).find('.colorpicker-component').colorpicker(options.colorType.colorpicker);        $input = $('input', $contenedor);        return {            container: $container,            input: $input        }    },    _setInputMoney: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<input name="' + options.name + '" class="form-control" placeholder="' + options.placeholder + ' "/>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('input', $container);        var $anElement = new AutoNumeric($input[0], {            currencySymbol: '$',            emptyInputBehavior: 'always',            decimalPlaces: 2,            minimumValue: 0,            modifyValueOnWheel: false        });        $input.data('numeric', $anElement);        return {            container: $container,            input: $input,        }    },    _setInputPercentage: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<input name="' + options.name + '" class="form-control" placeholder="' + options.placeholder + ' "/>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('input', $container);        var $anElement = new AutoNumeric($input[0], {            // currencySymbol: '%',            emptyInputBehavior: 'always',            decimalPlaces: 2,            minimumValue: 0,            modifyValueOnWheel: false        });        $input.data('numeric', $anElement);        return {            container: $container,            input: $input,        }    },    _setDualButton: function (options) {        var main_button = options.dualButtonType.main_button;        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="input-group">' +            '<button style="white-space: normal; padding: 6px 25px;" name="' + options.name + '" ' +            'class="btn btn-main btn-block btn-' + main_button.type + '">' +            main_button.text + '</button>' +            '<span class="input-group-btn"></span>' +            '</div>' +            '<span class="form-control-feedback" style="right: 40px" ></span>' +            '</div>' +            '</div>'        );        var $input = $('.btn-main', $container).click(function () {            main_button.click.call(this);        });        if (options.dualButtonType.buttons.length !== 0)            $.each(options.dualButtonType.buttons, function (i, button) {                button = $.extend({                    type: 'default',                    show: true                }, button);                var $button = $(                    '<button style="padding: 9px 12px" class="btn btn-' + button.type + '">' +                    '<i class="' + button.icon + '"></i>' +                    '</button>'                ).click(function () {                    var data = $(this).data('data');                    data.click.call($input);                }).data('data', button);                // button.show = button.show !== undefined ? button.show : true;                if (!button.show)                    $button.hide();                $('.input-group-btn', $container).append($button);            });        else            $('.input-group', $container).css('width', '100%');        // $('.btn-secundary', $container).click(function() {        //     secundary_button.click.call($('.btn-main', $container));        // });        return {            container: $container,            input: $input        }    },    _set_input_text_button: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="input-group" style="width: 100%">' +            '<input name="' + options.name + '" type="' + options.type + '" class="form-control" placeholder="' + options.placeholder + ' "/>' +            '<span class="input-group-btn" ></span>' +            '</div>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('input', $container)        $.each(options.text_button_type.buttons, function (i, button) {            button = $.extend({                type: 'default',                show: true            }, button);            var $button = $(                '<button name="' + button.name + '" style="padding: 9px 12px" class="btn btn-' + button.type + '">' +                '<i class="' + button.icon + '"></i>' +                '</button>'            ).click(function () {                var data = $(this).data('data');                var value = $input.prop('type') === 'text' ? $input.val() : $input.data('data');                data.click.call(this, $input, value);            }).data('data', button);            if (!button.show)                $button.hide();            $container.find('.input-group-btn').append($button);        });        $input.on('validate', function () {            var $container = $(this).closest('.form-group');            var $feedback = $container.find('.form-control-feedback');            var $input_group_btn = $container.find('.input-group-btn');            $feedback.css('right', $input_group_btn.width());        }).on('hide_button', function (e, name) {            $(this).next().find('[name="' + name + '"]').hide('fast');        }).on('show_button', function (e, name) {            $(this).next().find('[name="' + name + '"]').show('fast');        });        return {            container: $container,            input: $input        }    },    _set_multiselect: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<input name="' + options.name + '" type="text" value="" class="form-control control-label"/>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('input', $container).jmultiselect_input(options.multiselect_type);        return {            container: $container,            input: $input        }    },    _set_tags_input: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<input name="' + options.name + '" type="text" class="form-control" />' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('input', $container);        if (options.tags_input_type.typeahead) {            options.tags_input_type.typeaheadjs = options.tags_input_type.typeahead();        }        $input.tagsinput(options.tags_input_type);        return {            container: $container,            input: $input        }    },    _set_input_group_button: function (options) {        var $container = $(            '<div class="element ' + options.class + '">' +            '<div class="form-group">' +            '<label class="control-label">' + options.label + '</label>' +            '<div class="input-group">' +            '<input name="' + options.name + '" type="' + options.type + '" class="form-control" placeholder="' + options.placeholder + ' "/>' +            '</div>' +            '<span class="form-control-feedback" ></span>' +            '</div>' +            '</div>'        );        var $input = $('input', $container)        var $button_span = $(            '<span class="input-group-addon">'+ options.input_group_type.value +'</span>'        );        if(options.input_group_type.position == 'left')            $container.find('.form-control').before($button_span);        else            $container.find('.form-control').after($button_span);        return {            container: $container,            input: $input        }    },});